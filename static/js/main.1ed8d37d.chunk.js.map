{"version":3,"sources":["icon.png","Graph/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Graph","props","state","result","fetch","then","re","json","console","log","data","results","map","el","countryName","省份","provinceShortName","value","curedCount","filter","undefined","sort","a","b","Column","title","text","visible","xField","yField","render","catch","er","id","style","height","width","React","Component","useStyles","makeStyles","root","backgroundColor","lightGreen","img","maxWidth","App","classes","useState","setValue","BottomNavigation","onChange","event","newValue","className","BottomNavigationAction","label","icon","src","Icon","alt","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,kC,6QC6C5BC,E,YAzCb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAAEC,OAAQ,IAFN,E,kFAMjBC,MADU,yCAEPC,MAAK,SAAAC,GAAE,OAAIA,EAAGC,UACdF,MAAK,SAAAC,GACJE,QAAQC,IAAIH,GACZ,IAAII,EAAOJ,EAAGK,QAAQC,KAAI,SAACC,GACzB,MAAsB,gBAAlBA,EAAGC,YACE,CAAEC,eAAIF,EAAGG,kBAAmBC,MAAOJ,EAAGK,iBAG7C,KAGJR,GADAA,EAAOA,EAAKS,QAAO,SAAAN,GAAE,YAAWO,IAAPP,MACbQ,MAAK,SAACC,EAAEC,GAAH,OAAOA,EAAEN,MAAMK,EAAEL,SAClCT,QAAQC,IAAIC,GACO,IAAIc,IAAO,SAAU,CACtCd,OACAe,MAAM,CAACC,KAAK,6CAAUC,SAAQ,GAC9BC,OAAQ,eACRC,OAAQ,UAGCC,YAGZC,OAAM,SAACC,GAAD,OAAQxB,QAAQC,IAAIuB,Q,+BAG7B,OACE,6BACE,yBAAKC,GAAG,SAASC,MAAO,CAAEC,OAAQ,SAAUC,MAAO,e,GApCvCC,IAAMC,W,iBCKpBC,EAAYC,YAAW,CAC3BC,KAAM,CACJL,MAAO,IACPM,gBAAgBC,IAAU,MAE5BC,IAAI,CACFC,SAAS,UA2BEC,MAvBf,SAAa7C,GAEX,IAAM8C,EAAUR,IAFE,EAGQF,IAAMW,SAAS,GAHvB,mBAGX/B,EAHW,KAGJgC,EAHI,KAIlB,OACE,6BACE,kBAACC,EAAA,EAAD,CACEjC,MAAOA,EACPkC,SAAU,SAACC,EAAOC,GAChBJ,EAASI,IAEXC,UAAWP,EAAQN,MAEnB,kBAACc,EAAA,EAAD,CAAwBC,MAAM,iCAAQC,KAAM,yBAAKC,IAAKC,IAAMC,IAAI,OAAON,UAAWP,EAAQH,QAC1F,kBAACW,EAAA,EAAD,CAAwBC,MAAM,2BAAOC,KAAM,yBAAKC,IAAKC,IAAMC,IAAI,OAAON,UAAWP,EAAQH,QACzF,kBAACW,EAAA,EAAD,CAAwBC,MAAM,2BAAOC,KAAM,yBAAKC,IAAKC,IAAMC,IAAI,OAAON,UAAWP,EAAQH,SAE3F,kBAAC,EAAD,QCvBciB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASpC,OAAO,kBAAC,EAAD,MAASqC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlE,MAAK,SAAAmE,GACjCA,EAAaC,kB","file":"static/js/main.1ed8d37d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon.0871d666.png\";","import React from 'react';\nimport { Column, Bar } from '@antv/g2plot'\n\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { result: [] };\n  }\n  componentWillMount() {\n    let url = 'https://lab.isaaclin.cn/nCoV/api/area';\n    fetch(url)\n      .then(re => re.json())\n      .then(re => {\n        console.log(re)\n        let data = re.results.map((el) => {\n          if (el.countryName == '中国') {\n            return { 省份: el.provinceShortName, value: el.curedCount }\n          }\n          else\n            return;\n        })\n        data = data.filter(el => el !== undefined)\n        data = data.sort((a,b)=>b.value-a.value)\n        console.log(data)\n        const columnPlot = new Column(\"canvas\", {\n          data,\n          title:{text:'各省份确诊人数',visible:true},\n          xField: '省份',\n          yField: 'value',\n\n        })\n        columnPlot.render();\n        return;\n      })\n      .catch((er) => console.log(er));\n  }\n  render() {\n    return (\n      <div>\n        <div id=\"canvas\" style={{ height: '1500px', width: '100%' }}></div>\n      </div>\n    );\n  }\n}\n\nexport default Graph;\n","import React from 'react';\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport lightGreen from '@material-ui/core/colors/lightGreen'\nimport Graph from './Graph'\nimport Icon from './icon.png'\nconst useStyles = makeStyles({\n  root: {\n    width: 500,\n    backgroundColor:lightGreen['A700']\n  },\n  img:{\n    maxWidth:'30px',\n  }\n});\n\nfunction App(props) {\n\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n  return (\n    <div>\n      <BottomNavigation\n        value={value}\n        onChange={(event, newValue) => {\n          setValue(newValue);\n        }}\n        className={classes.root}\n      >\n        <BottomNavigationAction label=\"各省份图表\" icon={<img src={Icon} alt=\"icon\" className={classes.img} />} />\n        <BottomNavigationAction label=\"市级图表\" icon={<img src={Icon} alt=\"icon\" className={classes.img} />} />\n        <BottomNavigationAction label=\"全球图表\" icon={<img src={Icon} alt=\"icon\" className={classes.img} />} />\n      </BottomNavigation>\n      <Graph />\n    </div>\n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}